node('ccode'){
    withEnv([
        'REPO_Safestring=https://github.com/intel/safestringlib.git',
        'REPO_TinyCBOR=https://github.com/intel/tinycbor.git',
        "TEST_DIR=${WORKSPACE}/sdo-test",
        "MANUFACTURER_DB_CONNECT_STRING=jdbc:mariadb://127.0.0.1:3306/sdo",
        "RESELLER_DB_CONNECT_STRING=jdbc:mariadb://127.0.0.1:4306/sdo"
      ])
  {
    stage('Clone Client-SDK'){
      cleanWs()
      dir('client-sdk'){
        checkout scm
      }
      sh 'git clone "${REPO_Safestring}"'
      sh 'git clone "${REPO_TinyCBOR}"'
      }

    stage('Build safestring'){
      sh '''
        cd $WORKSPACE/safestringlib
        echo 'Building safestring'
        git checkout v1.0.0
        mkdir obj
        make
      '''
    }

    stage('Build TinyCBOR'){
      sh '''
        cd $WORKSPACE/tinycbor
        echo 'Building TinyCBOR'
        git checkout v0.5.3
        make
      '''
    }

    stage('Build ClientSDK'){
      sh '''
        export SAFESTRING_ROOT=$WORKSPACE/safestringlib
        echo $SAFESTRING_ROOT
        export TINYCBOR_ROOT=$WORKSPACE/tinycbor
        echo $TINYCBOR_ROOT
        cd $WORKSPACE/client-sdk
        $WORKSPACE/client-sdk/cDevice_Build.sh
        tar -cvzf x86_ecdsa256_c_sct_bin.tar.gz ecdsa256_c_sct_device_bin
        tar -cvzf x86_ecdsa384_c_sct_bin.tar.gz ecdsa384_c_sct_device_bin
      '''
      print "Archive the artifacts"
      archiveArtifacts artifacts: 'client-sdk/x86_*.tar.gz', fingerprint: true, allowEmptyArchive: false
    }

    stage('Build TPM'){
      sh '''
        export SAFESTRING_ROOT=$WORKSPACE/safestringlib
        export TINYCBOR_ROOT=$WORKSPACE/tinycbor
        cd $WORKSPACE/client-sdk
        ./cDevice_Build_tpm.sh
        tar -cvzf tpm_ecdsa_c_device_bin.tar.gz tpm_ecdsa_c_device_bin
      '''
      print "Archive the artifacts"
      archiveArtifacts artifacts: 'client-sdk/tpm_*.tar.gz', fingerprint: true, allowEmptyArchive: false
    }

  try
  {
    stage('Run Smoketest')
    {
      // Checking out the smoke test code
      checkout([$class: 'GitSCM', branches: [[name: '*/master']], extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'sdo-test']], userRemoteConfigs: [[credentialsId: 'sdo-automationgithubtoken', url: 'https://github.com/secure-device-onboard-ci/sdo-test']]])

      // Creating the required directories
      sh '''
        mkdir -p sdo-test/binaries/pri-fidoiot
        mkdir -p sdo-test/binaries/client-sdk-fidoiot
      '''

      // Copying the contents to the folder
      print "Copying PRI-FIDOIOT and CSDK-FIDO artifacts"
      copyArtifacts filter: 'demo.tar.gz', fingerprintArtifacts: true, projectName: 'pri-fidoiot/master', selector: lastSuccessful(), target: 'sdo-test/binaries/pri-fidoiot/'
      print "Extracting PRI-FIDOIOT and Client-SDK-FIDO artifacts"
      sh '''
        tar -xvzf sdo-test/binaries/pri-fidoiot/demo.tar.gz
        cp -r demo/* sdo-test/binaries/pri-fidoiot/
        cp client-sdk/ecdsa256_c_sct_device_bin/linux-client sdo-test/binaries/client-sdk-fidoiot/
        cp -r client-sdk/ecdsa256_c_sct_device_bin/data sdo-test/
      '''

      // Updating the TO0 scheduling time interval
      sh '''
        cd sdo-test/binaries/pri-fidoiot/owner
        sed -i 's/300/60/g' owner.env
      '''
      
      // Setting the TEST_DIR and executing smoke test
      sh'''
        cd sdo-test/
        export TEST_DIR=`pwd`
        mvn clean test -Dgroups=fdo_clientsdk_smoketest
      '''
    
    }
  }
  finally
  {
    // Remove the files
    print "Removing the files"
    sh'''
      rm -f sdo-test/linux64.sh
      rm -f sdo-test/payload.bin
      rm -f sdo-test/result.txt
      rm -rf sdo-test/data
    '''
    print "Pruning docker containers"
    sh'''
      docker system prune -a -f
    '''
  }

    cleanWs cleanWhenFailure: false, cleanWhenNotBuilt: false, notFailBuild: true   
  }
}
