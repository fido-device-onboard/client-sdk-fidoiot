node('ccode'){
    withEnv([
        'REPO_Safestring=https://github.com/intel/safestringlib.git',
        'REPO_TinyCBOR=https://github.com/intel/tinycbor.git',
        "TEST_DIR=${WORKSPACE}/sdo-test",
        "MANUFACTURER_DB_CONNECT_STRING=jdbc:mariadb://127.0.0.1:3306/sdo",
        "RESELLER_DB_CONNECT_STRING=jdbc:mariadb://127.0.0.1:4306/sdo"
      ])
  {
    stage('Clone Client-SDK'){
      cleanWs()
      dir('client-sdk'){
        checkout scm
      }
      sh 'git clone "${REPO_Safestring}"'
      sh 'git clone "${REPO_TinyCBOR}"'
      }

    stage('Build safestring'){
      sh '''
        cd $WORKSPACE/safestringlib
        echo 'Building safestring'
        git checkout v1.0.0
        mkdir obj
        make
      '''
    }

    stage('Build TinyCBOR'){
      sh '''
        cd $WORKSPACE/tinycbor
        echo 'Building TinyCBOR'
        git checkout v0.5.3
        make
      '''
    }

    stage('Build ClientSDK'){
      sh '''
        export SAFESTRING_ROOT=$WORKSPACE/safestringlib
        echo $SAFESTRING_ROOT
        export TINYCBOR_ROOT=$WORKSPACE/tinycbor
        echo $TINYCBOR_ROOT
        cd $WORKSPACE/client-sdk
        $WORKSPACE/client-sdk/cDevice_Build.sh
        tar -cvzf x86_ecdsa256_c_sct_bin.tar.gz ecdsa256_c_sct_device_bin
        tar -cvzf x86_ecdsa384_c_sct_bin.tar.gz ecdsa384_c_sct_device_bin
      '''
      print "Archive the artifacts"
      archiveArtifacts artifacts: 'client-sdk/x86_*.tar.gz', fingerprint: true, allowEmptyArchive: false
    }

    stage('Build TPM'){
      sh '''
        export SAFESTRING_ROOT=$WORKSPACE/safestringlib
        export TINYCBOR_ROOT=$WORKSPACE/tinycbor
        cd $WORKSPACE/client-sdk
        ./cDevice_Build_tpm.sh
        tar -cvzf tpm_ecdsa_c_device_bin.tar.gz tpm_ecdsa_c_device_bin
      '''
      print "Archive the artifacts"
      archiveArtifacts artifacts: 'client-sdk/tpm_*.tar.gz', fingerprint: true, allowEmptyArchive: false
    }

  try
  {
    stage('Run Smoketest')
    {
      // Checking out the smoke test code
      checkout([$class: 'GitSCM', branches: [[name: '*/master']], extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'sdo-test']], userRemoteConfigs: [[credentialsId: 'sdo-automationgithubtoken', url: 'https://github.com/secure-device-onboard-ci/sdo-test']]])

      // Creating the required directories
      sh '''
        mkdir -p sdo-test/binaries/pri-fidoiot
        mkdir -p sdo-test/binaries/client-sdk-fidoiot
        docker ps
        docker stop $(docker ps -a -q)
        netstat -ltnp | grep 8040;../..
      '''

      // Copying the contents to the folder
      print "Copying PRI-FIDOIOT and CSDK-FIDO artifacts"
      copyArtifacts filter: 'demo.tar.gz', fingerprintArtifacts: true, projectName: 'pri-fidoiot/master', selector: lastSuccessful(), target: 'sdo-test/binaries/pri-fidoiot/'
      print "Extracting PRI-FIDOIOT and Client-SDK-FIDO artifacts"
      sh '''
        tar -xvzf sdo-test/binaries/pri-fidoiot/demo.tar.gz
        cp -r demo/* sdo-test/binaries/pri-fidoiot/
        cp client-sdk/ecdsa256_c_sct_device_bin/linux-client sdo-test/binaries/client-sdk-fidoiot/
        cp -r client-sdk/ecdsa256_c_sct_device_bin/data sdo-test/
      '''

      // Setting the TEST_DIR and executing smoke test
      sh'''
        cd sdo-test
        export TEST_DIR=`pwd`
        mvn clean test -Dgroups=fdo_clientsdk_smoketest
      '''
    
    }
  }
  finally
  {
    // Remove the files
    print "Removing the files"
    sh'''
      rm -f sdo-test/linux64.sh
      rm -f sdo-test/payload.bin
      rm -f sdo-test/result.txt
    '''
    print "Removing and Pruning docker containers"
    sh'''
      docker stop $(docker ps -a -q)
      docker system prune -a -f
    '''
  }
//try{
//      stage('Run SmokeTest'){
//        checkout([$class: 'GitSCM', branches: [[name: '*/master']], extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'sdo-test']], userRemoteConfigs: [[credentialsId: 'sdo-automationgithubtoken', url: 'https://github.com/secure-device-onboard-ci/sdo-test']]])
//        sh '''
//          mkdir -p sdo-test/binaries/pri
//          mkdir -p sdo-test/binaries/supply-chain-tools
//          mkdir -p sdo-test/binaries/rendezvous-service
//          mkdir -p sdo-test/binaries/client-sdk/x86_ecdsa256_sct_bin
//          mkdir -p sdo-test/binaries/client-sdk/x86_ecdsa384_sct_bin
//        '''
//        print "copying the dependent binaries from pri, supply-chain-tools and rendezvous-service"
//        copyArtifacts filter: 'demo.tar.gz', fingerprintArtifacts: true, projectName: 'pri/master', selector: lastSuccessful(), target: 'sdo-test/binaries/pri/'
//        copyArtifacts filter: 'demo.tar.gz', fingerprintArtifacts: true, projectName: 'supply-chain-tools/master', selector: lastSuccessful(), target: 'sdo-test/binaries/supply-chain-tools/'
//        copyArtifacts filter: 'demo.tar.gz', fingerprintArtifacts: true, projectName: 'rendezvous-service/master', selector: lastSuccessful(), target: 'sdo-test/binaries/rendezvous-service'
//        print "Extract the dependent binaries to respective folders"
//        sh '''
//          tar -xvzf sdo-test/binaries/pri/demo.tar.gz -C sdo-test/binaries/pri/ --strip=1
//          tar -xvzf sdo-test/binaries/supply-chain-tools/demo.tar.gz -C sdo-test/binaries/supply-chain-tools/ --strip=1
//          tar -xvzf sdo-test/binaries/rendezvous-service/demo.tar.gz -C sdo-test/binaries/rendezvous-service/ --strip=1
//        '''
//        print "Copy client-sdk artifacts to sdo-test/binaries folder"
//        sh '''
//          tar -xvzf client-sdk/x86_ecdsa256_c_sct_bin.tar.gz -C sdo-test/binaries/client-sdk/x86_ecdsa256_sct_bin/ --strip=1
//          cp sdo-test/testFiles/keys/ecdsa256privkey.dat sdo-test/binaries/client-sdk/x86_ecdsa256_sct_bin/data/
//          tar -xvzf client-sdk/x86_ecdsa384_c_sct_bin.tar.gz -C sdo-test/binaries/client-sdk/x86_ecdsa384_sct_bin/ --strip=1
//          cp sdo-test/testFiles/keys/ecdsa384privkey.dat sdo-test/binaries/client-sdk/x86_ecdsa384_sct_bin/data/
//          cp -r sdo-test/binaries/client-sdk sdo-test
//        '''
//        print "Create tomcat containers running manufacturer & db"
//        sh '''
//          cd sdo-test/binaries/supply-chain-tools/docker_manufacturer/
//          docker-compose up -d --build
//          docker logs manufacturer-mariadb
//          docker logs manufacturer
//        '''
//        print "Client-SDK Device smoke Tests with PRI-RV, SCT-Manufacturer"
//        sh '''
//          cd sdo-test
//          mvn clean verify -Dgroups=CdeviceTests
//        '''
//        print "Client-SDKDevice smoke Tests with Onprem-RV, SCT-Manufacturer"
//        sh '''
//         cd sdo-test
//          mvn clean verify -Dgroups=CdeviceOnPremTests
//        '''
//        }
//    } finally {
//        print "stop tomcat containers running manufacturer & db"
//        sh '''
//          docker logs manufacturer-mariadb > mariadbLog.txt
//          docker logs manufacturer > manufacturerLog.txt
//          docker stop $(docker ps -a -q)
//          docker rm -v $(docker ps -a -q) -f
//          docker system prune -a -f
//          docker images -a
//          docker volume ls
//          docker ps -a
//        '''
//        print "Archive the smoke test logs "
//        sh 'mkdir SmokeTest_Log'
//        sh '''
//          cp -r manufacturerLog.txt SmokeTest_Log/
//         cp -r mariadbLog.txt SmokeTest_Log/
//          cp -r sdo-test/logs/*_log.txt SmokeTest_Log/
//          tar -zcvf SmokeTest_Log.tar.gz SmokeTest_Log
//        '''
//        archiveArtifacts artifacts: 'SmokeTest_Log.tar.gz', fingerprint: true, allowEmptyArchive: false
//    }
    //Clean workspace after build is successfull
    cleanWs cleanWhenFailure: false, cleanWhenNotBuilt: false, notFailBuild: true   
  }
}
